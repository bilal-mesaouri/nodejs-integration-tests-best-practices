# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  check-folder-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.detect-changes.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Detect folder changes
        id: detect-changes
        run: |
          if git diff --quiet HEAD^1 HEAD -- 'example-application/business-logic/'; then
            echo "::set-output name=changed::false"
          else
            echo "::set-output name=changed::true"
          fi
  build:
    needs: check-folder-changes
    if: needs.check-folder-changes.outputs.changes == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
        cache: 'npm'


    - uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '2.14.2' # the full version of `docker-compose` command
    
    - name: Cache node_modules
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Decide whether to install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true' # Execute only if no cache was restored
      run: npm ci
  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
        cache: 'npm'

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '2.14.2' # the full version of `docker-compose` command

    - run: npm test

  test_nestjs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
        cache: 'npm'

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '2.14.2' # the full version of `docker-compose` command


    - run: npm run test:nestjs

  test_mocha:
    runs-on: ubuntu-latest
    needs: test_nestjs

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
        cache: 'npm'

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm run test:mocha
